
class Vector:
    
    def __init__(self, *args): #инициализация класса, аргс - аргументы
        assert all(type(arg) in (int, float) for arg in args) #учим программу ругаться, если мы вводим не int и float
        self.args = args #кроме того, мы можем "вытащить" i-тый аргумент: Vecor.args[i]; вывести кортеж с целиковым вектором: Vector.args
        self.args = list(self.args) #класс нам создал кортеж, а для удобства работы мы переводм его в изменяемый список
    
    def __add__(self,other): #сложение векторов
        res = []
        if len(self.args) == len(other.args):
            for i in range(len(self.args)):
                res.append(self.args[i] + other.args[i])
            return Vector((*res))
        else:
            return False
        
    def __sub__(self,other): #вычитание векторов
        res = []
        if len(self.args) == len(other.args):
            for i in range(len(self.args)):
                res.append(self.args[i] - other.args[i])
            return Vector((*res))
        else:
            return False
    
    def __mul__(self,other): #скалярное произведение двух векторов
        if isinstance(other, Vector) and isinstance(self, Vector):
            res = 0
            if len(self.args) == len(other.args):
                for i in range(len(self.args)):
                    res = res + (self.args[i] * other.args[i])
                return res
            else:
                return False
        elif isinstance(self, Vector) and (isinstance(other, int) or isinstance(other, float)):
            res = []
            for i in range(len(self.args)):
                res.append(self.args[i]*other)
            return Vector(*res)
    
    def __abs__(self): #модуль вектора
        return((self*self)**0.5)
        
    def angle(self,other): #косинус угла между двумя векторами
        return((self*other)/((abs(self))*(abs(other))))

    
    
if __name__ == '__main__': #код теста
    a = Vector(1,1,2,4)
    b = Vector(2,2,1,3)
    c = Vector(1,1,2)
    aaddb = a+b
    badda = b+a
    
    print('a, b, c:', a.args, b.args, c.args) 
    print('addition commutativity test, a+b=b+a:', a+b, b+a)
    print('addition length equality test a+c=False:', a+c)
    print('subtraction test, a-b, b-a:', a-b, b-a)
    print('subtraction length equality test a-c=False:', a-c)
    print('scalar multiplication commutativity test, a*b=b*a:', a*b, b*a)
    print('scalar multiplication length equality test a*c=False:', a*c)
    print('multiplication by number commutativity test, a*3=3*a:', a*3) #НЕ ПОЛУЧАЕТСЯ СДЕЛАТЬ КОММУТАТИВНЫМ МАМА
    print('module test:', abs(a), abs(b), abs(c))
    print('angle test, a^b=b^a:', a.angle(b), b.angle(a))
